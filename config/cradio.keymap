/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions

#define BASE 0
#define NUM 1
#define SYM 2
#define SYS 3
#define NAV 4

// -----------------

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp ENTER>, <&kp Q>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp M>, <&kp ENTER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <36>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_ltab {
            timeout-ms = <36>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        combo_lshift {
            timeout-ms = <36>;
            key-positions = <11 12>;
            bindings = <&kp RSHFT>;
        };

        combo_lcmd {
            timeout-ms = <36>;
            key-positions = <21 22>;
            bindings = <&kp RCMD>;
        };

        combo_lctrl {
            timeout-ms = <44>;
            key-positions = <12 22>;
            bindings = <&kp LCTRL>;
        };

        combo_lnum {
            timeout-ms = <36>;
            key-positions = <2 3>;
            bindings = <&mo 1>;
        };

        combo_lsym {
            timeout-ms = <36>;
            key-positions = <12 13>;
            bindings = <&mo 2>;
        };

        combo_lsys {
            timeout-ms = <36>;
            key-positions = <22 23>;
            bindings = <&mo 3>;
        };

        combo_rshift {
            timeout-ms = <36>;
            key-positions = <17 18>;
            bindings = <&kp RSHFT>;
        };

        combo_rcmd {
            timeout-ms = <36>;
            key-positions = <27 28>;
            bindings = <&kp RCMD>;
        };

        combo_rctrl {
            timeout-ms = <44>;
            key-positions = <17 27>;
            bindings = <&kp RCTRL>;
        };

        combo_rnum {
            timeout-ms = <36>;
            key-positions = <6 7>;
            bindings = <&mo 1>;
        };

        combo_rsym {
            timeout-ms = <36>;
            key-positions = <16 17>;
            bindings = <&mo 2>;
        };

        combo_rsys {
            timeout-ms = <36>;
            key-positions = <26 27>;
            bindings = <&mo 3>;
        };

        combo_capslock {
            timeout-ms = <44>;
            key-positions = <16 17 18>;
            bindings = <&kp CAPS>;
        };

        combo_nav {
            timeout-ms = <44>;
            key-positions = <11 12 13>;
            bindings = <&tog NAV>;
        };

        combo_ralt {
            bindings = <&kp RALT>;
            key-positions = <7 8>;
        };

        combo_shift_ctrl {
            bindings = <&kp RS(RCTRL)>;
            key-positions = <16 26>;
        };

        combo_next_sheet {
            timeout-ms = <30>;
            key-positions = <7 17>;
            bindings = <&kp RA(DOWN)>;
        };

        combo_prev_sheet {
            timeout-ms = <30>;
            key-positions = <2 12>;
            bindings = <&kp LA(UP)>;
        };

        combo_switch_window {
            timeout-ms = <30>;
            key-positions = <1 27 28>;
            bindings = <&kp RG(GRAVE)>;
        };
        
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
/*0         1      2      3          4            5        6         7      8      9 */
&kp FSLH  &kp H  &kp G  &kp R      &kp P        &kp Y    &kp D     &kp O  &kp M  &kp SEMI
/*10        11     12     13         14           15       16        17     18     19 */
&kp Z     &kp S  &kp E  &kp A      &kp F        &kp B    &kp T     &kp N  &kp I  &td0
/*20        21     22     23         24           25       26        27     28     29 */
&kp EXCL  &kp X  &kp C  &kp V      &kp J        &kp K    &kp L     &kp W  &kp U  &kp SQT
                     /*   30         31           32       33  */
                        &kp SPACE  &kp COMMA    &kp DOT  &kp BSPC
            >;
        };

        NUM {
            bindings = <
&kp FSLH  &kp N1  &kp N2  &kp N3  &kp KP_MINUS    &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&kp DOT   &kp N4  &kp N5  &kp N6  &kp KP_PLUS     &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&kp STAR  &kp N7  &kp N8  &kp N9  &kp EQUAL       &kp F11  &kp F12  &trans  &trans  &trans
                          &kp N0  &kp COMMA       &kp DOT  &kp BSPC
            >;
        };

        SYM {
            bindings = <
&kp TILDE  &kp LBKT   &kp LBRC   &kp LPAR      &kp ASTRK    &kp TILDE  &kp RPAR     &kp RBRC    &kp RBKT  &trans
&kp PIPE   &kp AT     &kp HASH   &kp KP_MINUS  &kp LT       &kp GT     &kp UNDER    &kp DOLLAR  &kp FSLH  &kp GRAVE
&trans     &kp PRCNT  &kp CARET  &kp AMPS      &trans       &trans     &kp KP_PLUS  &kp EQUAL   &kp BSLH  &trans
                                 &trans        &trans       &trans     &trans
            >;
        };

        SYS {
            bindings = <
&trans      &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &trans        &kp DEL        &kp HOME  &kp UP     &kp PG_UP  &trans
&bt BT_NXT  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans        &kp C_AL_CALC  &kp LEFT  &kp DOWN   &kp RIGHT  &bt BT_NXT
&trans      &kp C_BRI_DN  &trans            &kp C_BRI_UP  &bt BT_CLR    &bt BT_CLR     &kp END   &kp PSCRN  &kp PG_DN  &trans
                                            &trans        &trans        &trans         &trans
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &kp HOME  &kp UP    &kp PG_UP  &trans
&trans  &trans  &trans  &trans  &trans    &trans    &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans    &trans    &kp END   &trans    &kp PG_DN  &trans
                        &trans  &trans    &kp BSPC  &trans
            >;
        };
    };
};
